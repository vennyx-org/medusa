{
	"id": 34580,
	"name": "medusa-config",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 34581,
			"name": "AdminOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Admin dashboard configurations."
					}
				]
			},
			"children": [
				{
					"id": 34582,
					"name": "disable",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether to disable the admin dashboard. If set to "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ", the admin dashboard is disabled,\nin both development and production environments. The default value is "
							},
							{
								"kind": "code",
								"text": "`false`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  admin: {\n    disable: process.env.ADMIN_DISABLED === \"true\" ||\n      false\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 34583,
					"name": "path",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The path to the admin dashboard. The default value is "
							},
							{
								"kind": "code",
								"text": "`/app`"
							},
							{
								"kind": "text",
								"text": ".\n\nThe value cannot be one of the reserved paths:\n- "
							},
							{
								"kind": "code",
								"text": "`/admin`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`/store`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`/auth`"
							},
							{
								"kind": "text",
								"text": "\n- "
							},
							{
								"kind": "code",
								"text": "`/`"
							},
							{
								"kind": "text",
								"text": "\n\n:::note\n\nWhen using Docker, make sure that the root path of the Docker image doesn't path the admin's "
							},
							{
								"kind": "code",
								"text": "`path`"
							},
							{
								"kind": "text",
								"text": ". For example, if the Docker image's root path is "
							},
							{
								"kind": "code",
								"text": "`/app`"
							},
							{
								"kind": "text",
								"text": ", change\nthe value of the "
							},
							{
								"kind": "code",
								"text": "`path`"
							},
							{
								"kind": "text",
								"text": " configuration, as it's "
							},
							{
								"kind": "code",
								"text": "`/app`"
							},
							{
								"kind": "text",
								"text": " by default.\n\n:::"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  admin: {\n    path: process.env.ADMIN_PATH || `/app`,\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "templateLiteral",
						"head": "/",
						"tail": [
							[
								{
									"type": "intrinsic",
									"name": "string"
								},
								""
							]
						]
					}
				},
				{
					"id": 34584,
					"name": "outDir",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The directory where the admin build is outputted when you run the "
							},
							{
								"kind": "code",
								"text": "`build`"
							},
							{
								"kind": "text",
								"text": " command.\nThe default value is "
							},
							{
								"kind": "code",
								"text": "`./build`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  admin: {\n    outDir: process.env.ADMIN_BUILD_DIR || `./build`,\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 34585,
					"name": "backendUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The URL of your Medusa application. This is useful to set when you deploy the Medusa application."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  admin: {\n    backendUrl: process.env.MEDUSA_BACKEND_URL ||\n      \"http://localhost:9000\"\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 34586,
					"name": "vite",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Configure the Vite configuration for the admin dashboard. This function receives the default Vite configuration\nand returns the modified configuration. The default value is "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 34587,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"signatures": [
								{
									"id": 34588,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 34589,
											"name": "config",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/node_modules/vite/dist/node/index.d.ts",
													"qualifiedName": "InlineConfig"
												},
												"name": "InlineConfig",
												"package": "vite"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/node_modules/vite/dist/node/index.d.ts",
											"qualifiedName": "InlineConfig"
										},
										"name": "InlineConfig",
										"package": "vite"
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						34582,
						34583,
						34584,
						34585,
						34586
					]
				}
			]
		},
		{
			"id": 34590,
			"name": "HttpCompressionOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "HTTP compression configurations."
					}
				]
			},
			"children": [
				{
					"id": 34591,
					"name": "enabled",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Whether HTTP compression is enabled. By default, it's "
							},
							{
								"kind": "code",
								"text": "`false`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 34592,
					"name": "level",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The level of zlib compression to apply to responses. A higher level will result in better compression but will take longer to complete.\nA lower level will result in less compression but will be much faster. The default value is "
							},
							{
								"kind": "code",
								"text": "`6`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 34593,
					"name": "memLevel",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "How much memory should be allocated to the internal compression state. It's an integer in the range of 1 (minimum level) and 9 (maximum level).\nThe default value is "
							},
							{
								"kind": "code",
								"text": "`8`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 34594,
					"name": "threshold",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The minimum response body size that compression is applied on. Its value can be the number of bytes or any string accepted by the\n[bytes](https://www.npmjs.com/package/bytes) module. The default value is "
							},
							{
								"kind": "code",
								"text": "`1024`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						34591,
						34592,
						34593,
						34594
					]
				}
			]
		},
		{
			"id": 34595,
			"name": "ProjectConfigOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Essential configurations related to the Medusa application, such as database and CORS configurations."
					}
				]
			},
			"children": [
				{
					"id": 34596,
					"name": "databaseName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The name of the database to connect to. If the name is specified in "
							},
							{
								"kind": "code",
								"text": "`databaseUrl`"
							},
							{
								"kind": "text",
								"text": ", then you don't have to use this configuration.\n\nMake sure to create the PostgreSQL database before using it. You can check how to create a database in\n[PostgreSQL's documentation](https://www.postgresql.org/docs/current/sql-createdatabase.html)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    databaseName: process.env.DATABASE_NAME ||\n      \"medusa-store\",\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 34597,
					"name": "databaseUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The PostgreSQL connection URL of the database, which is of the following format:\n\n"
							},
							{
								"kind": "code",
								"text": "```bash\npostgres://[user][:password]@[host][:port]/[dbname]\n```"
							},
							{
								"kind": "text",
								"text": "\n\nWhere:\n\n- "
							},
							{
								"kind": "code",
								"text": "`[user]`"
							},
							{
								"kind": "text",
								"text": ": (required) your PostgreSQL username. If not specified, the system's username is used by default. The database user that you use must have create privileges. If you're using the "
							},
							{
								"kind": "code",
								"text": "`postgres`"
							},
							{
								"kind": "text",
								"text": " superuser, then it should have these privileges by default. Otherwise, make sure to grant your user create privileges. You can learn how to do that in [PostgreSQL's documentation](https://www.postgresql.org/docs/current/ddl-priv.html).\n- "
							},
							{
								"kind": "code",
								"text": "`[:password]`"
							},
							{
								"kind": "text",
								"text": ": an optional password for the user. When provided, make sure to put "
							},
							{
								"kind": "code",
								"text": "`:`"
							},
							{
								"kind": "text",
								"text": " before the password.\n- "
							},
							{
								"kind": "code",
								"text": "`[host]`"
							},
							{
								"kind": "text",
								"text": ": (required) your PostgreSQL host. When run locally, it should be "
							},
							{
								"kind": "code",
								"text": "`localhost`"
							},
							{
								"kind": "text",
								"text": ".\n- "
							},
							{
								"kind": "code",
								"text": "`[:port]`"
							},
							{
								"kind": "text",
								"text": ": an optional port that the PostgreSQL server is listening on. By default, it's "
							},
							{
								"kind": "code",
								"text": "`5432`"
							},
							{
								"kind": "text",
								"text": ". When provided, make sure to put "
							},
							{
								"kind": "code",
								"text": "`:`"
							},
							{
								"kind": "text",
								"text": " before the port.\n- "
							},
							{
								"kind": "code",
								"text": "`[dbname]`"
							},
							{
								"kind": "text",
								"text": ": (required) the name of the database.\n\nYou can learn more about the connection URL format in [PostgreSQL’s documentation](https://www.postgresql.org/docs/current/libpq-connect.html)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "For example, set the following database URL in your environment variables:\n\n"
									},
									{
										"kind": "code",
										"text": "```bash\nDATABASE_URL=postgres://postgres@localhost/medusa-store\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThen, use the value in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.js`"
									},
									{
										"kind": "text",
										"text": ":\n\n"
									},
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    databaseUrl: process.env.DATABASE_URL,\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 34598,
					"name": "databaseSchema",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The database schema to connect to. This is not required to provide if you’re using the default schema, which is "
							},
							{
								"kind": "code",
								"text": "`public`"
							},
							{
								"kind": "text",
								"text": ".\n\n"
							},
							{
								"kind": "code",
								"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    databaseSchema: process.env.DATABASE_SCHEMA ||\n      \"custom\",\n    // ...\n  },\n  // ...\n})\n```"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 34599,
					"name": "databaseLogging",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This configuration specifies whether database messages should be logged."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    databaseLogging: false\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 34601,
					"name": "databaseDriverOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This configuration is used to pass additional options to the database connection. You can pass any configuration. For example, pass the\n"
							},
							{
								"kind": "code",
								"text": "`ssl`"
							},
							{
								"kind": "text",
								"text": " property that enables support for TLS/SSL connections.\n\nThis is useful for production databases, which can be supported by setting the "
							},
							{
								"kind": "code",
								"text": "`rejectUnauthorized`"
							},
							{
								"kind": "text",
								"text": " attribute of "
							},
							{
								"kind": "code",
								"text": "`ssl`"
							},
							{
								"kind": "text",
								"text": " object to "
							},
							{
								"kind": "code",
								"text": "`false`"
							},
							{
								"kind": "text",
								"text": ".\nDuring development, it’s recommended not to pass this option.\n\n:::note\n\nMake sure to add to the end of the database URL "
							},
							{
								"kind": "code",
								"text": "`?ssl_mode=disable`"
							},
							{
								"kind": "text",
								"text": " as well when disabling "
							},
							{
								"kind": "code",
								"text": "`rejectUnauthorized`"
							},
							{
								"kind": "text",
								"text": ".\n\n:::"
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    databaseDriverOptions: process.env.NODE_ENV !== \"development\" ?\n      { ssl: { rejectUnauthorized: false } } : {}\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 34602,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 34603,
											"name": "connection",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 34604,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 34605,
															"name": "ssl",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Configure support for TLS/SSL connection"
																	}
																]
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 34606,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 34607,
																			"name": "rejectUnauthorized",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"summary": [
																					{
																						"kind": "text",
																						"text": "Whether to fail connection if the server certificate is verified against the list of supplied CAs and the hostname and no match is found."
																					}
																				]
																			},
																			"type": {
																				"type": "literal",
																				"value": false
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [
																				34607
																			]
																		}
																	]
																}
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																34605
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												34603
											]
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 34608,
					"name": "redisUrl",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This configuration specifies the connection URL to Redis to store the Medusa server's session.\n\n:::note\n\nYou must first have Redis installed. You can refer to [Redis's installation guide](https://redis.io/docs/getting-started/installation/).\n\n:::\n\nThe Redis connection URL has the following format:\n\n"
							},
							{
								"kind": "code",
								"text": "```bash\nredis[s]://[[username][:password]@][host][:port][/db-number]\n```"
							},
							{
								"kind": "text",
								"text": "\n\nFor a local Redis installation, the connection URL should be "
							},
							{
								"kind": "code",
								"text": "`redis://localhost:6379`"
							},
							{
								"kind": "text",
								"text": " unless you’ve made any changes to the Redis configuration during installation."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    redisUrl: process.env.REDIS_URL ||\n      \"redis://localhost:6379\",\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 34609,
					"name": "redisPrefix",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This configuration defines a prefix on all keys stored in Redis for the Medusa server's session. The default value is "
							},
							{
								"kind": "code",
								"text": "`sess:`"
							},
							{
								"kind": "text",
								"text": ".\n\nIf this configuration option is provided, it is prepended to "
							},
							{
								"kind": "code",
								"text": "`sess:`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    redisPrefix: process.env.REDIS_URL || \"medusa:\",\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 34610,
					"name": "redisOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This configuration defines options to pass ioredis for the Redis connection used to store the Medusa server's session. Refer to [ioredis’s RedisOptions documentation](https://redis.github.io/ioredis/index.html#RedisOptions)\nfor the list of available options."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    redisOptions: {\n      connectionName: process.env.REDIS_CONNECTION_NAME ||\n        \"medusa\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../node_modules/ioredis/built/redis/RedisOptions.d.ts",
							"qualifiedName": "RedisOptions"
						},
						"name": "RedisOptions",
						"package": "ioredis"
					}
				},
				{
					"id": 34611,
					"name": "sessionOptions",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This configuration defines additional options to pass to [express-session](https://www.npmjs.com/package/express-session), which is used to store the Medusa server's session."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    sessionOptions: {\n      name: process.env.SESSION_NAME || \"custom\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
							"qualifiedName": "SessionOptions"
						},
						"name": "SessionOptions",
						"package": "@medusajs/framework"
					}
				},
				{
					"id": 34614,
					"name": "workerMode",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Configure the application's worker mode.\n\nWorkers are processes running separately from the main application. They're useful for executing long-running or resource-heavy tasks in the background, such as importing products.\n\nWith a worker, these tasks are offloaded to a separate process. So, they won't affect the performance of the main application.\n\n![Diagram showcasing how the server and worker work together](https://res.cloudinary.com/dza7lstvk/image/upload/fl_lossy/f_auto/r_16/ar_16:9,c_pad/v1/Medusa%20Book/medusa-worker_klkbch.jpg?_a=BATFJtAA0)\n\nMedusa has three runtime modes:\n\n- Use "
							},
							{
								"kind": "code",
								"text": "`shared`"
							},
							{
								"kind": "text",
								"text": " to run the application in a single process.\n- Use "
							},
							{
								"kind": "code",
								"text": "`worker`"
							},
							{
								"kind": "text",
								"text": " to run the a worker process only.\n- Use "
							},
							{
								"kind": "code",
								"text": "`server`"
							},
							{
								"kind": "text",
								"text": " to run the application server only.\n\nIn production, it's recommended to deploy two instances:\n\n1. One having the "
							},
							{
								"kind": "code",
								"text": "`workerMode`"
							},
							{
								"kind": "text",
								"text": " configuration set to "
							},
							{
								"kind": "code",
								"text": "`server`"
							},
							{
								"kind": "text",
								"text": ".\n2. Another having the "
							},
							{
								"kind": "code",
								"text": "`workerMode`"
							},
							{
								"kind": "text",
								"text": " configuration set to "
							},
							{
								"kind": "code",
								"text": "`worker`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    workerMode: process.env.WORKER_MODE || \"shared\"\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "shared"
							},
							{
								"type": "literal",
								"value": "worker"
							},
							{
								"type": "literal",
								"value": "server"
							}
						]
					}
				},
				{
					"id": 34615,
					"name": "http",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This property configures the application's http-specific settings."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      cookieSecret: \"supersecret\",\n      compression: {\n        // ...\n      }\n    }\n    // ...\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 34616,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 34617,
									"name": "jwtSecret",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A random string used to create authentication tokens in the http layer. Although this configuration option is not required, it’s highly recommended to set it for better security.\n\nIn a development environment, if this option is not set the default secret is "
											},
											{
												"kind": "code",
												"text": "`supersecret`"
											},
											{
												"kind": "text",
												"text": ". However, in production, if this configuration is not set, an\nerror is thrown and the application crashes."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      jwtSecret: \"supersecret\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 34618,
									"name": "jwtExpiresIn",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The expiration time for the JWT token. Its format is based off the [ms package](https://github.com/vercel/ms).\n\nIf not provided, the default value is "
											},
											{
												"kind": "code",
												"text": "`24h`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      jwtExpiresIn: \"2d\"\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 34619,
									"name": "cookieSecret",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A random string used to create cookie tokens in the http layer. Although this configuration option is not required, it’s highly recommended to set it for better security.\n\nIn a development environment, if this option is not set, the default secret is "
											},
											{
												"kind": "code",
												"text": "`supersecret`"
											},
											{
												"kind": "text",
												"text": ". However, in production, if this configuration is not set, an error is thrown and\nthe application crashes."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      cookieSecret: \"supersecret\"\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 34620,
									"name": "authCors",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Medusa application's API Routes are protected by Cross-Origin Resource Sharing (CORS). So, only allowed URLs or URLs matching a specified pattern can send requests to the backend’s API Routes.\n\n"
											},
											{
												"kind": "code",
												"text": "`cors`"
											},
											{
												"kind": "text",
												"text": " is a string used to specify the accepted URLs or patterns for API Routes starting with "
											},
											{
												"kind": "code",
												"text": "`/auth`"
											},
											{
												"kind": "text",
												"text": ". It can either be one accepted origin, or a comma-separated list of accepted origins.\n\nEvery origin in that list must either be:\n\n1. A URL. For example, "
											},
											{
												"kind": "code",
												"text": "`http://localhost:7001`"
											},
											{
												"kind": "text",
												"text": ". The URL must not end with a backslash;\n2. Or a regular expression pattern that can match more than one origin. For example, "
											},
											{
												"kind": "code",
												"text": "`.example.com`"
											},
											{
												"kind": "text",
												"text": ". The regex pattern that Medusa tests for is "
											},
											{
												"kind": "code",
												"text": "`^([/~@;%#'])(.*?)\\1([gimsuy]*)$`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "text",
														"text": "Some example values of common use cases:\n\n"
													},
													{
														"kind": "code",
														"text": "```bash\n# Allow different ports locally starting with 700\nAUTH_CORS=/http://localhost:700\\d+$/\n\n# Allow any origin ending with vercel.app. For example, admin.vercel.app\nAUTH_CORS=/vercel\\.app$/\n\n# Allow all HTTP requests\nAUTH_CORS=/http://.+/\n```"
													},
													{
														"kind": "text",
														"text": "\n\nThen, set the configuration in "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ":\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      authCors: process.env.AUTH_CORS\n    }\n    // ...\n  },\n  // ...\n})\n```"
													},
													{
														"kind": "text",
														"text": "\n\nIf you’re adding the value directly within "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ", make sure to add an extra escaping "
													},
													{
														"kind": "code",
														"text": "`/`"
													},
													{
														"kind": "text",
														"text": " for every backslash in the pattern. For example:\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      authCors: \"/http:\\\\/\\\\/localhost:700\\\\d+$/\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 34621,
									"name": "compression",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Configure HTTP compression from the application layer. If you have access to the HTTP server, the recommended approach would be to enable it there.\nHowever, some platforms don't offer access to the HTTP layer and in those cases, this is a good alternative.\n\nIf you enable HTTP compression and you want to disable it for specific API Routes, you can pass in the request header "
											},
											{
												"kind": "code",
												"text": "`\"x-no-compression\": true`"
											},
											{
												"kind": "text",
												"text": ".\nLearn more in the [API Reference](https://docs.medusajs.com/v2/api/store#http-compression)."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      compression: {\n        enabled: true,\n        level: 6,\n        memLevel: 8,\n        threshold: 1024\n      }\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 34590,
										"name": "HttpCompressionOptions",
										"package": "@medusajs/framework"
									}
								},
								{
									"id": 34622,
									"name": "storeCors",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Medusa application's API Routes are protected by Cross-Origin Resource Sharing (CORS). So, only allowed URLs or URLs matching a specified pattern can send requests to the backend’s API Routes.\n\n"
											},
											{
												"kind": "code",
												"text": "`store_cors`"
											},
											{
												"kind": "text",
												"text": " is a string used to specify the accepted URLs or patterns for store API Routes. It can either be one accepted origin, or a comma-separated list of accepted origins.\n\nEvery origin in that list must either be:\n\n1. A URL. For example, "
											},
											{
												"kind": "code",
												"text": "`http://localhost:8000`"
											},
											{
												"kind": "text",
												"text": ". The URL must not end with a backslash;\n2. Or a regular expression pattern that can match more than one origin. For example, "
											},
											{
												"kind": "code",
												"text": "`.example.com`"
											},
											{
												"kind": "text",
												"text": ". The regex pattern that the backend tests for is "
											},
											{
												"kind": "code",
												"text": "`^([/~@;%#'])(.*?)\\1([gimsuy]*)$`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "text",
														"text": "Some example values of common use cases:\n\n"
													},
													{
														"kind": "code",
														"text": "```bash\n# Allow different ports locally starting with 800\nSTORE_CORS=/http://localhost:800\\d+$/\n\n# Allow any origin ending with vercel.app. For example, storefront.vercel.app\nSTORE_CORS=/vercel\\.app$/\n\n# Allow all HTTP requests\nSTORE_CORS=/http://.+/\n```"
													},
													{
														"kind": "text",
														"text": "\n\nThen, set the configuration in "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ":\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      storeCors: process.env.STORE_CORS,\n    }\n    // ...\n  },\n  // ...\n})\n```"
													},
													{
														"kind": "text",
														"text": "\n\nIf you’re adding the value directly within "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ", make sure to add an extra escaping "
													},
													{
														"kind": "code",
														"text": "`/`"
													},
													{
														"kind": "text",
														"text": " for every backslash in the pattern. For example:\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      storeCors: \"/vercel\\\\.app$/\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 34623,
									"name": "adminCors",
									"variant": "declaration",
									"kind": 1024,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Medusa application's API Routes are protected by Cross-Origin Resource Sharing (CORS). So, only allowed URLs or URLs matching a specified pattern can send requests to the backend’s API Routes.\n\n"
											},
											{
												"kind": "code",
												"text": "`admin_cors`"
											},
											{
												"kind": "text",
												"text": " is a string used to specify the accepted URLs or patterns for admin API Routes. It can either be one accepted origin, or a comma-separated list of accepted origins.\n\nEvery origin in that list must either be:\n\n1. A URL. For example, "
											},
											{
												"kind": "code",
												"text": "`http://localhost:7001`"
											},
											{
												"kind": "text",
												"text": ". The URL must not end with a backslash;\n2. Or a regular expression pattern that can match more than one origin. For example, "
											},
											{
												"kind": "code",
												"text": "`.example.com`"
											},
											{
												"kind": "text",
												"text": ". The regex pattern that the backend tests for is "
											},
											{
												"kind": "code",
												"text": "`^([/~@;%#'])(.*?)\\1([gimsuy]*)$`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "text",
														"text": "Some example values of common use cases:\n\n"
													},
													{
														"kind": "code",
														"text": "```bash\n# Allow different ports locally starting with 700\nADMIN_CORS=/http://localhost:700\\d+$/\n\n# Allow any origin ending with vercel.app. For example, admin.vercel.app\nADMIN_CORS=/vercel\\.app$/\n\n# Allow all HTTP requests\nADMIN_CORS=/http://.+/\n```"
													},
													{
														"kind": "text",
														"text": "\n\nThen, set the configuration in "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ":\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      adminCors: process.env.ADMIN_CORS,\n    }\n    // ...\n  },\n  // ...\n})\n```"
													},
													{
														"kind": "text",
														"text": "\n\nIf you’re adding the value directly within "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ", make sure to add an extra escaping "
													},
													{
														"kind": "code",
														"text": "`/`"
													},
													{
														"kind": "text",
														"text": " for every backslash in the pattern. For example:\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      adminCors: \"/vercel\\\\.app$/\",\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 34624,
									"name": "authMethodsPerActor",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "This configuration specifies the supported authentication providers per actor type (such as "
											},
											{
												"kind": "code",
												"text": "`user`"
											},
											{
												"kind": "text",
												"text": ", "
											},
											{
												"kind": "code",
												"text": "`customer`"
											},
											{
												"kind": "text",
												"text": ", or any custom actors).\nFor example, you only want to allow SSO logins for "
											},
											{
												"kind": "code",
												"text": "`users`"
											},
											{
												"kind": "text",
												"text": ", while you want to allow email/password logins for "
											},
											{
												"kind": "code",
												"text": "`customers`"
											},
											{
												"kind": "text",
												"text": " to the storefront.\n\n"
											},
											{
												"kind": "code",
												"text": "`authMethodsPerActor`"
											},
											{
												"kind": "text",
												"text": " is a a map where the actor type (eg. 'user') is the key, and the value is an array of supported auth provider IDs."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "text",
														"text": "Some example values of common use cases:\n\nThen, set the configuration in "
													},
													{
														"kind": "code",
														"text": "`medusa-config.js`"
													},
													{
														"kind": "text",
														"text": ":\n\n"
													},
													{
														"kind": "code",
														"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    http: {\n      authMethodsPerActor: {\n        user: [\"email\"],\n        customer: [\"emailpass\", \"google\"]\n      }\n    }\n    // ...\n  },\n  // ...\n})\n```"
													}
												]
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										34617,
										34618,
										34619,
										34620,
										34621,
										34622,
										34623,
										34624
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						34596,
						34597,
						34598,
						34599,
						34601,
						34608,
						34609,
						34610,
						34611,
						34614,
						34615
					]
				}
			]
		},
		{
			"id": 34625,
			"name": "ConfigModule",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The configurations for your Medusa application are in "
					},
					{
						"kind": "code",
						"text": "`medusa-config.js`"
					},
					{
						"kind": "text",
						"text": " located in the root of your Medusa project. The configurations include configurations for database, modules, and more.\n\n"
					},
					{
						"kind": "code",
						"text": "`medusa-config.js`"
					},
					{
						"kind": "text",
						"text": " exports the value returned by the "
					},
					{
						"kind": "code",
						"text": "`defineConfig`"
					},
					{
						"kind": "text",
						"text": " utility function imported from "
					},
					{
						"kind": "code",
						"text": "`@medusajs/utils`"
					},
					{
						"kind": "text",
						"text": ".\n\n"
					},
					{
						"kind": "code",
						"text": "`defineConfig`"
					},
					{
						"kind": "text",
						"text": " accepts as a parameter an object with the following properties:\n\n- "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "projectConfig",
						"target": 34626,
						"tsLinkText": "projectConfig"
					},
					{
						"kind": "text",
						"text": " (required): An object that holds general configurations related to the Medusa application, such as database or CORS configurations.\n- "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "admin",
						"target": 34627,
						"tsLinkText": "admin"
					},
					{
						"kind": "text",
						"text": ": An object that holds admin-related configurations.\n- "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "modules",
						"target": 34632,
						"tsLinkText": "modules"
					},
					{
						"kind": "text",
						"text": ": An object that configures the Medusa application's modules.\n- "
					},
					{
						"kind": "inline-tag",
						"tag": "@link",
						"text": "featureFlags",
						"target": 34633,
						"tsLinkText": "featureFlags"
					},
					{
						"kind": "text",
						"text": ": An object that enables or disables features guarded by a feature flag.\n\nFor example:\n\n"
					},
					{
						"kind": "code",
						"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  projectConfig: {\n    // ...\n  },\n  admin: {\n    // ...\n  },\n  modules: {\n    // ...\n  },\n  featureFlags: {\n    // ...\n  }\n})\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---\n\n## Environment Variables\n\nIt's highly recommended to store the values of configurations in environment variables, then reference them within "
					},
					{
						"kind": "code",
						"text": "`medusa-config.js`"
					},
					{
						"kind": "text",
						"text": ".\n\nDuring development, you can set your environment variables in the "
					},
					{
						"kind": "code",
						"text": "`.env`"
					},
					{
						"kind": "text",
						"text": " file at the root of your Medusa application project. In production,\nsetting the environment variables depends on the hosting provider.\n\n---"
					}
				]
			},
			"children": [
				{
					"id": 34626,
					"name": "projectConfig",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This property holds essential configurations related to the Medusa application, such as database and CORS configurations."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 34595,
						"name": "ProjectConfigOptions",
						"package": "@medusajs/framework"
					}
				},
				{
					"id": 34627,
					"name": "admin",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This property holds configurations for the Medusa Admin dashboard."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  admin: {\n    backendUrl: process.env.MEDUSA_BACKEND_URL ||\n      \"http://localhost:9000\"\n  },\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 34581,
						"name": "AdminOptions",
						"package": "@medusajs/framework"
					}
				},
				{
					"id": 34632,
					"name": "modules",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This property holds all custom modules installed in your Medusa application.\n\n:::note\n\nMedusa's commerce modules are configured by default, so only\nadd them to this property if you're changing their configurations or adding providers to a module.\n\n:::\n\nThe keys of the "
							},
							{
								"kind": "code",
								"text": "`modules`"
							},
							{
								"kind": "text",
								"text": " configuration object refer to the module's registration name. Its value can be one of the following:\n\n1. A boolean value indicating whether the module type is enabled. This is only supported for Medusa's commerce and architectural modules;\n2. Or an object having the following properties:\n    1. "
							},
							{
								"kind": "code",
								"text": "`resolve`"
							},
							{
								"kind": "text",
								"text": ": a string indicating the path to the module relative to "
							},
							{
								"kind": "code",
								"text": "`src`"
							},
							{
								"kind": "text",
								"text": ", or the module's NPM package name. For example, "
							},
							{
								"kind": "code",
								"text": "`./modules/my-module`"
							},
							{
								"kind": "text",
								"text": ".\n    2. "
							},
							{
								"kind": "code",
								"text": "`options`"
							},
							{
								"kind": "text",
								"text": ": (optional) an object indicating the options to pass to the module."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  modules: {\n    helloModuleService: {\n      resolve: \"./modules/hello\"\n    }\n  }\n  // ...\n})\n```"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Partial"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/modules-sdk/index.ts",
															"qualifiedName": "InternalModuleDeclaration"
														},
														"name": "InternalModuleDeclaration",
														"package": "@medusajs/types"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/modules-sdk/index.ts",
															"qualifiedName": "ExternalModuleDeclaration"
														},
														"name": "ExternalModuleDeclaration",
														"package": "@medusajs/types"
													}
												]
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								]
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 34633,
					"name": "featureFlags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Some features in the Medusa application are guarded by a feature flag. This ensures constant shipping of new features while maintaining the engine’s stability.\n\nYou can enable a feature in your application by enabling its feature flag. Feature flags are enabled through either environment\nvariables or through this configuration property exported in "
							},
							{
								"kind": "code",
								"text": "`medusa-config.js`"
							},
							{
								"kind": "text",
								"text": ".\n\nThe "
							},
							{
								"kind": "code",
								"text": "`featureFlags`"
							},
							{
								"kind": "text",
								"text": "'s value is an object. Its properties are the names of the feature flags, and their value is a boolean indicating whether the feature flag is enabled.\n\nYou can find available feature flags and their key name [here](https://github.com/medusajs/medusa/tree/develop/packages/medusa/src/loaders/feature-flags)."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```js title=\"medusa-config.js\"\nmodule.exports = defineConfig({\n  featureFlags: {\n    analytics: true,\n    // ...\n  }\n  // ...\n})\n```"
									},
									{
										"kind": "text",
										"text": "\n\n:::note\n\nAfter enabling a feature flag, make sure to run migrations as it may require making changes to the database.\n\n:::"
									}
								]
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								]
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						34626,
						34627,
						34632,
						34633
					]
				}
			]
		},
		{
			"id": 34634,
			"name": "PluginDetails",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 34635,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 34636,
							"name": "resolve",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 34637,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 34638,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 34639,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 34640,
							"name": "version",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								34636,
								34637,
								34638,
								34639,
								34640
							]
						}
					]
				}
			}
		}
	],
	"groups": [
		{
			"title": "Interfaces",
			"children": [
				34581,
				34590,
				34595,
				34625
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				34634
			]
		}
	],
	"packageName": "@medusajs/framework",
	"symbolIdMap": {
		"34580": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": ""
		},
		"34581": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "AdminOptions"
		},
		"34582": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.disable"
		},
		"34583": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.path"
		},
		"34584": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.outDir"
		},
		"34585": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.backendUrl"
		},
		"34586": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.vite"
		},
		"34587": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type"
		},
		"34588": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type"
		},
		"34589": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "config"
		},
		"34590": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "HttpCompressionOptions"
		},
		"34591": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.enabled"
		},
		"34592": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.level"
		},
		"34593": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.memLevel"
		},
		"34594": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.threshold"
		},
		"34595": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "ProjectConfigOptions"
		},
		"34596": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.databaseName"
		},
		"34597": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.databaseUrl"
		},
		"34598": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.databaseSchema"
		},
		"34599": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.databaseLogging"
		},
		"34601": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.databaseDriverOptions"
		},
		"34602": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type"
		},
		"34603": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.connection"
		},
		"34604": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type"
		},
		"34605": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.ssl"
		},
		"34606": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type"
		},
		"34607": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.rejectUnauthorized"
		},
		"34608": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.redisUrl"
		},
		"34609": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.redisPrefix"
		},
		"34610": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.redisOptions"
		},
		"34611": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.sessionOptions"
		},
		"34614": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.workerMode"
		},
		"34615": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.http"
		},
		"34616": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type"
		},
		"34617": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.jwtSecret"
		},
		"34618": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.jwtExpiresIn"
		},
		"34619": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.cookieSecret"
		},
		"34620": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.authCors"
		},
		"34621": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.compression"
		},
		"34622": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.storeCors"
		},
		"34623": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.adminCors"
		},
		"34624": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.authMethodsPerActor"
		},
		"34625": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "ConfigModule"
		},
		"34626": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.projectConfig"
		},
		"34627": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.admin"
		},
		"34632": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.modules"
		},
		"34633": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.featureFlags"
		},
		"34634": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "PluginDetails"
		},
		"34635": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type"
		},
		"34636": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.resolve"
		},
		"34637": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.name"
		},
		"34638": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.id"
		},
		"34639": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.options"
		},
		"34640": {
			"sourceFileName": "../../../../packages/framework/framework/src/config/types.ts",
			"qualifiedName": "__type.version"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/framework/framework/src/config/types.ts"
		},
		"reflections": {
			"1": 34580
		}
	}
}