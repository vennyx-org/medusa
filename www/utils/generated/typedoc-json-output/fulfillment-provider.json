{
	"id": 34425,
	"name": "fulfillment-provider",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 34426,
			"name": "AbstractFulfillmentProviderService",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "### constructor\n\nThe constructor allows you to access resources from the module's container using the first parameter,\nand the module's options using the second parameter.\n\n:::note\n\nA module's options are passed when you register it in the Medusa application.\n\n:::\n\nIf you're creating a client or establishing a connection with a third-party service, do it in the constructor.\n\n#### Example\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nimport { AbstractFulfillmentProviderService } from \"@medusajs/framework/utils\"\nimport { Logger } from \"@medusajs/framework/types\"\n\ntype InjectedDependencies = {\n  logger: Logger\n}\n\ntype Options = {\n  apiKey: string\n}\n\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  protected logger_: Logger\n  protected options_: Options\n  // assuming you're initializing a client\n  protected client\n\n  constructor(\n    { logger }: InjectedDependencies,\n    options: Options\n  ) {\n    super()\n\n    this.logger_ = logger\n    this.options_ = options\n  }\n}\n\nexport default MyFulfillmentProviderService\n```"
					}
				]
			},
			"children": [
				{
					"id": 34427,
					"name": "identifier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The "
							},
							{
								"kind": "code",
								"text": "`identifier`"
							},
							{
								"kind": "text",
								"text": " property holds a unique identifier of the fulfillment module provider.\n\nYou can use the kebab-case name of the provider as its value.\n\nFor example:\n\n"
							},
							{
								"kind": "code",
								"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  static identifier = \"my-fulfillment\"\n\n  // ...\n}"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 34435,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 34436,
							"name": "new AbstractFulfillmentProviderService",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 34426,
								"name": "AbstractFulfillmentProviderService",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 34439,
					"name": "getFulfillmentOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34440,
							"name": "getFulfillmentOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves the shipping options this fulfillment provider supports."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of fulfillment options."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport { FulfillmentOption } from \"@medusajs/framework/types\"\n\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async getFulfillmentOptions(): Promise<FulfillmentOption[]> {\n    return [\n      {\n        id: \"express\"\n      },\n      {\n        id: \"return-express\",\n        is_return: true\n      }\n    ]\n  }\n}\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../../../packages/core/types/src/fulfillment/provider.ts",
												"qualifiedName": "FulfillmentOption"
											},
											"name": "FulfillmentOption",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.getFulfillmentOptions"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.getFulfillmentOptions"
					}
				},
				{
					"id": 34441,
					"name": "validateFulfillmentData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34442,
							"name": "validateFulfillmentData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property of a shipping method and returns it. The returned data\nis stored in the shipping method's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property.\n\nYour fulfillment provider can use the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property to store additional information useful for\nhandling the fulfillment later. For example, you may store an ID from the third-party fulfillment\nsystem."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the data to store in the "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipping method."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async validateFulfillmentData(\n    optionData: any, \n    data: any, \n    context: any\n  ): Promise<any> {\n    // assuming your client retrieves an ID from the\n    // third-party service\n    const externalId = await this.client.getId()\n  \n    return {\n      ...data,\n      externalId\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34443,
									"name": "optionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipping option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 34444,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipping method."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 34445,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Context details, such as context of the cart or customer."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.validateFulfillmentData"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.validateFulfillmentData"
					}
				},
				{
					"id": 34446,
					"name": "validateOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34447,
							"name": "validateOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property of a shipping option when it's created.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property can hold useful information that's later added to the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " attribute\nof shipping methods created from this option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the data is valid."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async validateOption(data: any): Promise<boolean> {\n    return data.external_id !== undefined\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34448,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data to validate."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.validateOption"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.validateOption"
					}
				},
				{
					"id": 34449,
					"name": "canCalculate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34450,
							"name": "canCalculate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method indicates whether a shippin option's price is calculated during \ncheckout or is fixed."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the price is calculated for the shipping option."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async canCalculate(data: any): Promise<boolean> {\n    return data.custom_type !== \"fixed\"\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34451,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipping option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.canCalculate"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.canCalculate"
					}
				},
				{
					"id": 34452,
					"name": "calculatePrice",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34453,
							"name": "calculatePrice",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method calculates the price of a shipping option, or a shipping method when it's created.\n\nThe Medusa application uses the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "canCalculate",
										"target": 34449,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method first to check whether the shipping option's price is calculated.\nIf it returns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": ", Medusa uses this method to retrieve the calculated price."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The calculated price"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async calculatePrice(optionData: any, data: any, cart: any): Promise<number> {\n    // assuming the client can calculate the price using\n    // the third-party service\n    const price = await this.client.calculate(data)\n  \n    return price\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34454,
									"name": "optionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of a shipping option."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 34455,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If the price is calculated for a shipping option, it's the "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " of the shipping option. Otherwise, it's the `data of the shipping method."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 34456,
									"name": "cart",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cart details."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.calculatePrice"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.calculatePrice"
					}
				},
				{
					"id": 34457,
					"name": "createFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34458,
							"name": "createFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when a fulfillment is created. If the method returns in the object a \n"
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, it's stored in the fulfillment's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property is useful when handling the fulfillment later,\nas you can access information useful for your integration.\n\nYou can also use this method to perform an action with the third-party fulfillment service."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The data to store in the fulfillment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async createFulfillment(\n    data: any, \n    items: any, \n    order: any, \n    fulfillment: any\n  ): Promise<any> {\n    // assuming the client creates a fulfillment\n    // in the third-party service\n    const externalData = await this.client.create(\n      fulfillment,\n      items\n    )\n  \n    return {\n      data: {\n        ...data,\n        ...externalData\n      }\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34459,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipping method this fulfillment is created for."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 34460,
									"name": "items",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The items in the fulfillment."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 34461,
									"name": "order",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order this fulfillment is created for."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 34462,
									"name": "fulfillment",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's details."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.createFulfillment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.createFulfillment"
					}
				},
				{
					"id": 34463,
					"name": "cancelFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34464,
							"name": "cancelFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when a fulfillment is canceled. Use it to perform operations\nwith the third-party fulfillment service."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async cancelFulfillment(fulfillment: any): Promise<any> {\n    // assuming the client cancels a fulfillment\n    // in the third-party service\n    await this.client.cancel(fulfillment.id)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34465,
									"name": "fulfillment",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's details."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.cancelFulfillment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.cancelFulfillment"
					}
				},
				{
					"id": 34466,
					"name": "getFulfillmentDocuments",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34467,
							"name": "getFulfillmentDocuments",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves the documents of a fulfillment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The fulfillment's documents."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async getFulfillmentDocuments(data: any): Promise<never[]> {\n    // assuming the client retrieves documents\n    // from a third-party service\n    return await this.client.documents(data)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34468,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the fulfillment."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.getFulfillmentDocuments"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.getFulfillmentDocuments"
					}
				},
				{
					"id": 34469,
					"name": "createReturnFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34470,
							"name": "createReturnFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when a fulfillment is created for a return. If the method returns in the object a \n"
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, it's stored in the fulfillment's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property is useful when handling the fulfillment later,\nas you can access information useful for your integration.\n\nUse this method to perform actions necessary in the third-party fulfillment service."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The data to store in the fulfillment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async createReturnFulfillment(fulfillment: any): Promise<any> {\n    // assuming the client creates a fulfillment for a return\n    // in the third-party service\n    const externalData = await this.client.createReturn(\n      fulfillment\n    )\n  \n    return {\n      data: {\n        ...fulfillment.data,\n        ...externalData\n      }\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34471,
									"name": "fulfillment",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's details."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.createReturnFulfillment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.createReturnFulfillment"
					}
				},
				{
					"id": 34472,
					"name": "getReturnDocuments",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34473,
							"name": "getReturnDocuments",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves documents for a return's fulfillment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The fulfillment's documents."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async getReturnDocuments(data: any): Promise<never[]> {\n    // assuming the client retrieves documents\n    // from a third-party service\n    return await this.client.documents(data)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34474,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the fulfillment."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.getReturnDocuments"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.getReturnDocuments"
					}
				},
				{
					"id": 34475,
					"name": "getShipmentDocuments",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34476,
							"name": "getShipmentDocuments",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves the documents for a shipment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The shipment's documents."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async getShipmentDocuments(data: any): Promise<never[]> {\n    // assuming the client retrieves documents\n    // from a third-party service\n    return await this.client.documents(data)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34477,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipmnet."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.getShipmentDocuments"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.getShipmentDocuments"
					}
				},
				{
					"id": 34478,
					"name": "retrieveDocuments",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 34479,
							"name": "retrieveDocuments",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves the documents of a fulfillment of a certain type."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The fulfillment's documents."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async retrieveDocuments(\n    fulfillmentData: any, \n    documentType: any\n  ): Promise<void> {\n    // assuming the client retrieves documents\n    // from a third-party service\n    return await this.client.documents(\n      fulfillmentData,\n      documentType\n    )\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 34480,
									"name": "fulfillmentData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the fulfillment."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 34481,
									"name": "documentType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The document's type. For example, "
											},
											{
												"kind": "code",
												"text": "`invoice`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.retrieveDocuments"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.retrieveDocuments"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						34435
					]
				},
				{
					"title": "Properties",
					"children": [
						34427
					]
				},
				{
					"title": "Methods",
					"children": [
						34439,
						34441,
						34446,
						34449,
						34452,
						34457,
						34463,
						34466,
						34469,
						34472,
						34475,
						34478
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../../packages/core/types/src/fulfillment/provider.ts",
						"qualifiedName": "IFulfillmentProvider"
					},
					"name": "IFulfillmentProvider",
					"package": "@medusajs/types"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				34426
			]
		}
	],
	"packageName": "@medusajs/utils",
	"symbolIdMap": {
		"34425": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": ""
		},
		"34426": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService"
		},
		"34427": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.identifier"
		},
		"34439": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getFulfillmentOptions"
		},
		"34440": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getFulfillmentOptions"
		},
		"34441": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.validateFulfillmentData"
		},
		"34442": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.validateFulfillmentData"
		},
		"34443": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "optionData"
		},
		"34444": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"34445": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "context"
		},
		"34446": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.validateOption"
		},
		"34447": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.validateOption"
		},
		"34448": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"34449": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.canCalculate"
		},
		"34450": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.canCalculate"
		},
		"34451": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"34452": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.calculatePrice"
		},
		"34453": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.calculatePrice"
		},
		"34454": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "optionData"
		},
		"34455": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"34456": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "cart"
		},
		"34457": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.createFulfillment"
		},
		"34458": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.createFulfillment"
		},
		"34459": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"34460": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "items"
		},
		"34461": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "order"
		},
		"34462": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "fulfillment"
		},
		"34463": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.cancelFulfillment"
		},
		"34464": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.cancelFulfillment"
		},
		"34465": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "fulfillment"
		},
		"34466": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getFulfillmentDocuments"
		},
		"34467": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getFulfillmentDocuments"
		},
		"34468": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"34469": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.createReturnFulfillment"
		},
		"34470": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.createReturnFulfillment"
		},
		"34471": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "fulfillment"
		},
		"34472": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getReturnDocuments"
		},
		"34473": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getReturnDocuments"
		},
		"34474": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"34475": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getShipmentDocuments"
		},
		"34476": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getShipmentDocuments"
		},
		"34477": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"34478": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.retrieveDocuments"
		},
		"34479": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.retrieveDocuments"
		},
		"34480": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "fulfillmentData"
		},
		"34481": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "documentType"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/fulfillment/provider.ts"
		},
		"reflections": {
			"1": 34425
		}
	}
}
